#!/usr/bin/env python3
"""
Complete Chamber Acquisition List
Generate comprehensive list of all missing essential and supplementary works
for each Chamber voice to enable maximum dialectical richness
"""

from collections import OrderedDict
import csv
from pathlib import Path

def generate_complete_acquisition_list():
    """Generate exhaustive acquisition list for full Chamber library"""
    
    # Read current library to check what we have
    csv_file = Path("apple_books_library.csv")
    current_library = set()
    
    if csv_file.exists():
        with open(csv_file, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for book in reader:
                # Normalize titles for matching
                title = book['title'].lower().replace(':', '').replace('-', '').replace(' ', '')
                current_library.add(title)
    
    # Check converted texts too
    converted_dir = Path("converted_texts")
    if converted_dir.exists():
        for file in converted_dir.glob("*.md"):
            # Extract title from filename
            title = file.stem.replace('-', '').replace('_', '')
            current_library.add(title)
    
    def check_if_have(title):
        """Check if we already have this work"""
        normalized = title.lower().replace(':', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
        return any(normalized in existing for existing in current_library)
    
    # Complete Chamber voice specifications
    chamber_voices = OrderedDict([
        ('Gaston Bachelard', {
            'current_status': 'STRONG (5+ works)',
            'essential_missing': [
                'The Right to Dream',
                'The Flame of a Candle'
            ],
            'supplementary_missing': [
                'Lautréamont',
                'The New Scientific Spirit',
                'The Dialectic of Duration',
                'The Philosophy of No',
                'Applied Rationalism'
            ],
            'priority': 'LOW (already well represented)',
            'thematic_gaps': ['Scientific rationalism', 'Literary criticism']
        }),
        
        ('Christopher Alexander', {
            'current_status': 'MINIMAL (1 core work)',
            'essential_missing': [
                'The Timeless Way of Building',
                'The Nature of Order Volume 1: The Phenomenon of Life',
                'The Nature of Order Volume 2: The Process of Creating Life', 
                'The Nature of Order Volume 3: A Vision of a Living World',
                'The Nature of Order Volume 4: The Luminous Ground',
                'A City is Not a Tree',
                'The Oregon Experiment'
            ],
            'supplementary_missing': [
                'Notes on the Synthesis of Form',
                'Houses Generated by Patterns',
                'A New Theory of Urban Design',
                'The Production of Houses',
                'The Linz Café',
                'A Foreshadowing of 21st Century Art',
                'The Battle for the Life and Beauty of the Earth'
            ],
            'priority': 'CRITICAL (major voice gap)',
            'thematic_gaps': ['Living systems', 'Urban design', 'Architectural theory', 'Wholeness']
        }),
        
        ('Walter Benjamin', {
            'current_status': 'FUNCTIONAL (3 works including key essay)',
            'essential_missing': [
                'The Arcades Project (complete)',
                'One-Way Street',
                'The Origin of German Tragic Drama',
                'Theses on the Philosophy of History'
            ],
            'supplementary_missing': [
                'Selected Writings Volume 1: 1913-1926',
                'Selected Writings Volume 2: 1927-1934', 
                'Selected Writings Volume 3: 1935-1938',
                'Selected Writings Volume 4: 1938-1940',
                'The Correspondence of Walter Benjamin',
                'Moscow Diary',
                'Berlin Chronicle',
                'Charles Baudelaire: A Lyric Poet in the Era of High Capitalism'
            ],
            'priority': 'HIGH (strengthen critical theory)',
            'thematic_gaps': ['Historical materialism', 'Baudelaire studies', 'German literature']
        }),
        
        ('Hannah Arendt', {
            'current_status': 'STRONG (4 core works)',
            'essential_missing': [
                'On Revolution',
                'The Life of the Mind Volume 1: Thinking',
                'The Life of the Mind Volume 2: Willing',
                'Crises of the Republic'
            ],
            'supplementary_missing': [
                'Men in Dark Times',
                'On Violence', 
                'Lectures on Kant\'s Political Philosophy',
                'The Promise of Politics',
                'Essays in Understanding',
                'The Jewish Writings',
                'Love and Saint Augustine',
                'Rahel Varnhagen: The Life of a Jewess'
            ],
            'priority': 'MEDIUM (good foundation, expand depth)',
            'thematic_gaps': ['Revolution theory', 'Kant studies', 'Jewish thought', 'Biography']
        }),
        
        ('Simone Weil', {
            'current_status': 'STRONG (4 works including core texts)',
            'essential_missing': [
                'The Need for Roots (EPUB version)',
                'Factory Journal',
                'Notebooks (complete edition)'
            ],
            'supplementary_missing': [
                'Letter to a Priest',
                'Intimations of Christianity',
                'On Science, Necessity and the Love of God',
                'Selected Essays 1934-1943',
                'Formative Writings 1929-1941',
                'First and Last Notebooks',
                'Seventy Letters'
            ],
            'priority': 'MEDIUM (good coverage, add depth)',
            'thematic_gaps': ['Science and necessity', 'Christian mysticism', 'Labor theory']
        }),
        
        ('Emmanuel Levinas', {
            'current_status': 'MISSING (PDF conversion failed)',
            'essential_missing': [
                'Totality and Infinity (EPUB version)',
                'Otherwise than Being or Beyond Essence',
                'Difficult Freedom',
                'Ethics and Infinity',
                'Entre Nous: On Thinking-of-the-Other'
            ],
            'supplementary_missing': [
                'Time and the Other',
                'Existence and Existents', 
                'God, Death, and Time',
                'Of God Who Comes to Mind',
                'Beyond the Verse',
                'In the Time of the Nations',
                'Alterity and Transcendence',
                'The Levinas Reader (edited by Sean Hand)'
            ],
            'priority': 'CRITICAL (missing entirely)',
            'thematic_gaps': ['Ethics', 'Face-to-face encounter', 'Responsibility', 'Judaism']
        }),
        
        ('Martin Heidegger', {
            'current_status': 'FUNCTIONAL (2 core works)',
            'essential_missing': [
                'Poetry, Language, Thought',
                'What is Called Thinking?',
                'Introduction to Metaphysics',
                'The Origin of the Work of Art'
            ],
            'supplementary_missing': [
                'Basic Writings (edited by David Farrell Krell)',
                'Pathmarks',
                'Country Path Conversations',
                'Building Dwelling Thinking',
                'The Principle of Reason',
                'What Is a Thing?',
                'Discourse on Thinking',
                'The End of Philosophy',
                'On Time and Being'
            ],
            'priority': 'HIGH (strengthen philosophical foundation)',
            'thematic_gaps': ['Art theory', 'Language philosophy', 'Thinking methodology']
        }),
        
        ('Robin Wall Kimmerer', {
            'current_status': 'MINIMAL (1 core work)',
            'essential_missing': [
                'Gathering Moss: A Natural and Cultural History of Mosses',
                'The Council of Pecans (if available as book)'
            ],
            'supplementary_missing': [
                'Native Science: Natural Laws of Interdependence (articles)',
                'Ancient Futures, Sacred Present (essays)',
                'Learning the Grammar of Animacy (academic papers)',
                'Skywoman Falling (essays)',
                'The Gift of Strawberries (essays)'
            ],
            'priority': 'HIGH (need more indigenous perspective)',
            'thematic_gaps': ['Botanical knowledge', 'Scientific methodology', 'Indigenous pedagogy']
        }),
        
        ('Shoshana Zuboff', {
            'current_status': 'MINIMAL (1 core work)',
            'essential_missing': [
                'In the Age of the Smart Machine (EPUB version)'
            ],
            'supplementary_missing': [
                'The Support Economy: Why Corporations Are Failing Individuals',
                'Creating Value in the Network Economy (essays)'
            ],
            'priority': 'MEDIUM (main work acquired)',
            'thematic_gaps': ['Organizational psychology', 'Digital economics']
        }),
        
        ('John Berger', {
            'current_status': 'EXCELLENT (18 works - complete)',
            'essential_missing': [],
            'supplementary_missing': [
                'G. (novel)',
                'Into Their Labours trilogy complete',
                'The White Bird',
                'Keeping a Rendezvous',
                'Pages of the Wound',
                'The Sense of Sight (complete essays)'
            ],
            'priority': 'LOWEST (already complete)',
            'thematic_gaps': ['Fiction', 'Complete essay collections']
        }),
        
        ('Aldus Manutius', {
            'current_status': 'MISSING ENTIRELY',
            'essential_missing': [
                'Hypnerotomachia Poliphili (the Aldine edition)',
                'The Aldine Press: A History of the Press',
                'Aldus Manutius: The Legacy of a Renaissance Printer',
                'The Aldine Classics'
            ],
            'supplementary_missing': [
                'Renaissance Book Design and Typography',
                'The Aldine Editions: A Complete Catalog',
                'Portable Books and the Invention of Italic Type',
                'Humanism and the Art of Printing',
                'The Aldine Academy and Venetian Printing'
            ],
            'priority': 'HIGH (unique typographic wisdom)',
            'thematic_gaps': ['Typography', 'Renaissance humanism', 'Book design', 'Printing history']
        }),
        
        ('Carl Jung', {
            'current_status': 'STRONG (3 major works)',
            'essential_missing': [
                'The Collected Works of C.G. Jung (EPUB versions by volume)',
                'Memories, Dreams, Reflections'
            ],
            'supplementary_missing': [
                'Man and His Symbols',
                'The Undiscovered Self',
                'Modern Man in Search of a Soul',
                'Psychology and Alchemy',
                'The Archetypes and the Collective Unconscious',
                'Psychological Types',
                'Two Essays on Analytical Psychology',
                'The Structure and Dynamics of the Psyche'
            ],
            'priority': 'MEDIUM (good foundation)',
            'thematic_gaps': ['Analytical psychology theory', 'Alchemy studies', 'Typology']
        })
    ])
    
    # Extended constellation voices worth adding
    extended_voices = OrderedDict([
        ('Maurice Merleau-Ponty', {
            'role': 'Phenomenologist of Perception',
            'essential_works': [
                'Phenomenology of Perception',
                'The Visible and the Invisible',
                'Eye and Mind',
                'The Structure of Behavior'
            ],
            'supplementary_works': [
                'Signs',
                'Sense and Non-Sense',
                'Adventures of the Dialectic',
                'The World of Perception'
            ],
            'priority': 'HIGH',
            'rationale': 'Essential bridge between Bachelard and Heidegger'
        }),
        
        ('Jane Jacobs', {
            'role': 'Urban Life Observer',
            'essential_works': [
                'The Death and Life of Great American Cities',
                'The Economy of Cities',
                'Cities and the Wealth of Nations',
                'The Nature of Economies'
            ],
            'supplementary_works': [
                'Systems of Survival',
                'Dark Age Ahead',
                'The Question of Separatism'
            ],
            'priority': 'HIGH',
            'rationale': 'Critical dialogue partner for Alexander on urban patterns'
        }),
        
        ('Lewis Mumford', {
            'role': 'Technology and City Critic',
            'essential_works': [
                'Technics and Civilization',
                'The City in History',
                'The Myth of the Machine Volume 1: Technics and Human Development',
                'The Myth of the Machine Volume 2: The Pentagon of Power'
            ],
            'supplementary_works': [
                'The Culture of Cities',
                'Art and Technics',
                'The Condition of Man',
                'The Conduct of Life'
            ],
            'priority': 'HIGH',
            'rationale': 'Essential for technology critique with Benjamin and Zuboff'
        }),
        
        ('Jacques Derrida', {
            'role': 'Philosopher of Deconstruction',
            'essential_works': [
                'Of Grammatology',
                'Writing and Difference',
                'Speech and Phenomena',
                'Margins of Philosophy'
            ],
            'supplementary_works': [
                'The Postcard',
                'Given Time',
                'The Gift of Death',
                'Archive Fever'
            ],
            'priority': 'MEDIUM',
            'rationale': 'Important dialogue with Levinas and Benjamin'
        }),
        
        ('Juhani Pallasmaa', {
            'role': 'Phenomenological Architect',
            'essential_works': [
                'The Eyes of the Skin: Architecture and the Senses',
                'The Thinking Hand: Existential and Embodied Wisdom',
                'The Embodied Image: Imagination and Imagery in Architecture'
            ],
            'supplementary_works': [
                'Mental and Existential Ecology',
                'Encounters 1: Architectural Essays',
                'Encounters 2: Architectural Essays'
            ],
            'priority': 'MEDIUM',
            'rationale': 'Bridges Alexander and Merleau-Ponty on embodied architecture'
        }),
        
        ('Ivan Illich', {
            'role': 'Critic of Industrial Society',
            'essential_works': [
                'Tools for Conviviality',
                'Deschooling Society',
                'Energy and Equity',
                'Medical Nemesis'
            ],
            'supplementary_works': [
                'Shadow Work',
                'Gender',
                'In the Vineyard of the Text',
                'The Rivers North of the Future'
            ],
            'priority': 'MEDIUM',
            'rationale': 'Important for technology and society critique'
        })
    ])
    
    return chamber_voices, extended_voices

def create_acquisition_report():
    """Create comprehensive acquisition report"""
    
    chamber_voices, extended_voices = generate_complete_acquisition_list()
    
    with open("complete_chamber_acquisition_list.md", "w") as f:
        f.write("# Complete Chamber Library Acquisition List\n\n")
        f.write("*Comprehensive guide to building the richest possible Chamber constellation*\n\n")
        
        # Priority summary
        f.write("## Acquisition Priority Summary\n\n")
        
        critical_count = 0
        high_count = 0
        medium_count = 0
        low_count = 0
        
        for voice_name, voice_data in chamber_voices.items():
            priority = voice_data['priority']
            if 'CRITICAL' in priority:
                critical_count += 1
            elif 'HIGH' in priority:
                high_count += 1
            elif 'MEDIUM' in priority:
                medium_count += 1
            else:
                low_count += 1
        
        f.write(f"- **🔥 CRITICAL Priority**: {critical_count} voices (missing entirely or major gaps)\n")
        f.write(f"- **🟡 HIGH Priority**: {high_count} voices (strengthen foundations)\n") 
        f.write(f"- **🟢 MEDIUM Priority**: {medium_count} voices (add depth and breadth)\n")
        f.write(f"- **⭐ LOW Priority**: {low_count} voices (already well represented)\n\n")
        
        # Core voices detailed breakdown
        f.write("## Core Chamber Voices (Essential 12)\n\n")
        
        for voice_name, voice_data in chamber_voices.items():
            f.write(f"### {voice_name}\n")
            f.write(f"**Current Status**: {voice_data['current_status']}  \n")
            f.write(f"**Acquisition Priority**: {voice_data['priority']}  \n")
            f.write(f"**Thematic Gaps**: {', '.join(voice_data['thematic_gaps'])}  \n\n")
            
            if voice_data['essential_missing']:
                f.write("**🔥 Essential Missing Works** (highest priority):\n")
                for i, work in enumerate(voice_data['essential_missing'], 1):
                    f.write(f"{i}. {work}\n")
                f.write("\n")
            
            if voice_data['supplementary_missing']:
                f.write("**📚 Supplementary Missing Works** (depth and breadth):\n")
                for work in voice_data['supplementary_missing']:
                    f.write(f"- {work}\n")
                f.write("\n")
            
            f.write("---\n\n")
        
        # Extended constellation
        f.write("## Extended Constellation (Recommended Additions)\n\n")
        f.write("*These voices would significantly enhance Chamber dialectical capabilities*\n\n")
        
        for voice_name, voice_data in extended_voices.items():
            f.write(f"### {voice_name}\n")
            f.write(f"**Role**: {voice_data['role']}  \n")
            f.write(f"**Priority**: {voice_data['priority']}  \n")
            f.write(f"**Rationale**: {voice_data['rationale']}  \n\n")
            
            f.write("**Essential Works**:\n")
            for work in voice_data['essential_works']:
                f.write(f"- {work}\n")
            f.write("\n")
            
            if voice_data.get('supplementary_works'):
                f.write("**Supplementary Works**:\n")
                for work in voice_data['supplementary_works'][:3]:
                    f.write(f"- {work}\n")
                if len(voice_data['supplementary_works']) > 3:
                    f.write(f"- ... and {len(voice_data['supplementary_works'])-3} more\n")
                f.write("\n")
            
            f.write("---\n\n")
        
        # Immediate action plan
        f.write("## Immediate Action Plan\n\n")
        
        f.write("### Phase 1: Critical Gaps (Complete Missing Voices)\n")
        critical_voices = [name for name, data in chamber_voices.items() if 'CRITICAL' in data['priority']]
        for voice in critical_voices:
            essential_works = chamber_voices[voice]['essential_missing'][:3]  # Top 3
            f.write(f"**{voice}**: {', '.join(essential_works)}\n")
        f.write("\n")
        
        f.write("### Phase 2: Strengthen Foundations\n")
        high_priority_voices = [name for name, data in chamber_voices.items() if 'HIGH' in data['priority']]
        for voice in high_priority_voices:
            essential_works = chamber_voices[voice]['essential_missing'][:2]  # Top 2
            f.write(f"**{voice}**: {', '.join(essential_works)}\n")
        f.write("\n")
        
        f.write("### Phase 3: Add Depth and Extended Voices\n")
        f.write("Focus on supplementary works and extended constellation voices.\n\n")
        
        # Master shopping list
        f.write("## Master Acquisition List (By Priority)\n\n")
        
        # Collect all works by priority
        critical_works = []
        high_works = []
        medium_works = []
        
        for voice_name, voice_data in chamber_voices.items():
            priority = voice_data['priority']
            works = voice_data['essential_missing'] + voice_data['supplementary_missing'][:3]  # Limit supplementary
            
            if 'CRITICAL' in priority:
                critical_works.extend([(work, voice_name) for work in works])
            elif 'HIGH' in priority:
                high_works.extend([(work, voice_name) for work in works])
            else:
                medium_works.extend([(work, voice_name) for work in works])
        
        f.write("### 🔥 Critical Priority (Acquire First)\n")
        for i, (work, voice) in enumerate(critical_works, 1):
            f.write(f"{i:2d}. **{work}** *(by {voice})*\n")
        f.write("\n")
        
        f.write("### 🟡 High Priority (Strengthen Core)\n")
        for i, (work, voice) in enumerate(high_works, 1):
            f.write(f"{i:2d}. **{work}** *(by {voice})*\n")
        f.write("\n")
        
        f.write("### 🟢 Medium Priority (Add Depth)\n")
        for i, (work, voice) in enumerate(medium_works[:15], 1):  # Limit to 15
            f.write(f"{i:2d}. **{work}** *(by {voice})*\n")
        if len(medium_works) > 15:
            f.write(f"... and {len(medium_works)-15} more works\n")
        f.write("\n")
        
        # Format guidelines
        f.write("## Acquisition Guidelines\n\n")
        f.write("### Preferred Formats\n")
        f.write("1. **EPUB** (converts perfectly)\n")
        f.write("2. **MOBI/AZW** (convertible to EPUB)\n")
        f.write("3. **HTML/Web** (can be converted)\n")
        f.write("4. **PDF** (challenging - pandoc limitations)\n\n")
        
        f.write("### Quality Considerations\n")
        f.write("- Prefer complete, unabridged editions\n")
        f.write("- Scholarly editions with good translations\n")
        f.write("- Avoid heavily DRM-protected files\n")
        f.write("- Check for OCR quality in older scans\n\n")
        
        f.write("### Estimated Total Works\n")
        total_essential = sum(len(v['essential_missing']) for v in chamber_voices.values())
        total_supplementary = sum(len(v['supplementary_missing']) for v in chamber_voices.values())
        total_extended = sum(len(v['essential_works']) for v in extended_voices.values())
        
        f.write(f"- **Essential missing works**: {total_essential}\n")
        f.write(f"- **Supplementary works**: {total_supplementary}\n") 
        f.write(f"- **Extended constellation**: {total_extended}\n")
        f.write(f"- **Total potential acquisitions**: {total_essential + total_supplementary + total_extended}\n\n")
        
        f.write("---\n\n")
        f.write("*This list represents the complete vision for the richest possible Chamber library.*  \n")
        f.write("*Start with Critical Priority works to achieve maximum dialectical enhancement.*\n")
    
    print("📄 Complete acquisition list saved to: complete_chamber_acquisition_list.md")
    
    # Summary statistics
    total_essential = sum(len(v['essential_missing']) for v in chamber_voices.values())
    total_supplementary = sum(len(v['supplementary_missing']) for v in chamber_voices.values())
    critical_voices = len([v for v in chamber_voices.values() if 'CRITICAL' in v['priority']])
    
    print(f"\n📊 ACQUISITION SUMMARY:")
    print(f"   🔥 Critical priority voices: {critical_voices}")
    print(f"   📚 Essential missing works: {total_essential}")
    print(f"   📖 Supplementary works: {total_supplementary}")
    print(f"   🌐 Extended constellation voices: {len(extended_voices)}")
    
    return chamber_voices, extended_voices

if __name__ == "__main__":
    print("📚 GENERATING COMPLETE CHAMBER ACQUISITION LIST")
    print("=" * 60)
    
    chamber_voices, extended_voices = create_acquisition_report()
    
    print(f"\n✨ Complete acquisition strategy documented!")
    print(f"📋 See complete_chamber_acquisition_list.md for full details")